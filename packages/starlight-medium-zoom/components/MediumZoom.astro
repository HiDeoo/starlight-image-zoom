<starlight-medium-zoom>
  <template>
    <section></section>
    <div data-smz-caption></div>
  </template>
</starlight-medium-zoom>

<style is:global>
  :root {
    --smz-animation-duration: 300ms;

    --smz-z-index-overlay: 90;
    --smz-z-index-image: 91;
    --smz-z-index-caption: 92;
  }

  .medium-zoom-overlay {
    inset: 0;
    opacity: 0;
    position: fixed;
    transition: opacity var(--smz-animation-duration);
    will-change: opacity;
    z-index: var(--smz-z-index-overlay);
  }

  .medium-zoom--opened .medium-zoom-overlay {
    cursor: zoom-out;
    opacity: 1;
  }

  .medium-zoom-image--hidden {
    visibility: hidden;
  }

  .medium-zoom-image--opened {
    cursor: zoom-out;
    position: relative;
    will-change: transform;
    z-index: var(--smz-z-index-image);
  }

  .medium-zoom-image {
    cursor: zoom-in;
    transition: transform var(--smz-animation-duration) cubic-bezier(0.2, 0, 0.2, 1);
  }
</style>

<style>
  [data-smz-caption] {
    background-color: color-mix(in srgb, var(--sl-color-bg-nav), transparent 40%);
    border-top: 1px solid var(--sl-color-hairline);
    bottom: 0;
    left: 0;
    opacity: 0;
    position: fixed;
    right: 0;
    transition: opacity var(--smz-animation-duration);
    will-change: opacity;
    z-index: var(--smz-z-index-caption);
  }

  :global(.medium-zoom--opened) [data-smz-caption] {
    opacity: 1;
  }
</style>

<script>
  customElements.define(
    'starlight-medium-zoom',
    class StarlightMediumZoom extends HTMLElement {
      #contentImageSelector =
        '.sl-markdown-content img:not([data-zoom-off]):not(:where(:is(.not-content, a[href], button) *))'
      #zoom?: import('medium-zoom').Zoom

      constructor() {
        super()

        window.addEventListener('DOMContentLoaded', () => {
          const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1))

          onIdle(async () => {
            const image = document.querySelector<HTMLDivElement>(this.#contentImageSelector)
            if (!image) return

            const template = this.querySelector('template')
            const templateSection = template?.content.querySelector('section')
            if (!template || !templateSection) return

            const { default: mediumZoom } = await import('medium-zoom/dist/pure')

            this.#zoom = mediumZoom(this.#contentImageSelector, {
              background: 'var(--sl-color-black)',
              container: templateSection,
              scrollOffset: 15,
              template,
            })

            this.#zoom.on('open', this.#onOpen)
            this.#zoom.on('close', this.#onClose)
          })
        })
      }

      #onOpen = (event: Event) => {
        if (!(event.target instanceof HTMLImageElement)) return

        this.#setCaption(event.target.alt)

        document.addEventListener('keydown', this.#onKeyDown)
      }

      #onClose = () => {
        document.removeEventListener('keydown', this.#onKeyDown)
      }

      #onKeyDown = (event: KeyboardEvent) => {
        if (event.key === 'Tab') {
          event.preventDefault()
          this.#zoom?.close()
        }
      }

      #setCaption(text: string) {
        requestAnimationFrame(() => {
          const footer = document.querySelector('[data-smz-caption]')
          if (!footer) return

          text = text.trim()

          if (text.length === 0) {
            footer.remove()
          } else {
            footer.textContent = text
          }
        })
      }
    },
  )
</script>
