<starlight-medium-zoom>
  <template>
    <section></section>
    <div data-starlight-medium-zoom-caption></div>
  </template>
</starlight-medium-zoom>

<!-- // TODO(HiDeoo) animation durable variable -->
<!-- // TODO(HiDeoo) scroll amount -->
<!-- // TODO(HiDeoo) delay caption -->

<style>
  :global(.medium-zoom-overlay) {
    inset: 0;
    opacity: 0;
    position: fixed;
    transition: opacity 0.3s;
    will-change: opacity;
    z-index: 90;
  }

  :global(.medium-zoom--opened .medium-zoom-overlay) {
    cursor: zoom-out;
    opacity: 1;
  }

  :global(.medium-zoom-image--hidden) {
    visibility: hidden;
  }

  :global(.medium-zoom-image--opened) {
    cursor: zoom-out;
    position: relative;
    will-change: transform;
    z-index: 91;
  }

  :global(.medium-zoom-image) {
    cursor: zoom-in;
    transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1);
  }

  [data-starlight-medium-zoom-caption] {
    background-color: color-mix(in srgb, var(--sl-color-bg-nav), transparent 40%);
    border-top: 1px solid var(--sl-color-hairline);
    bottom: 0;
    left: 0;
    position: fixed;
    right: 0;
    z-index: 92;
  }
</style>

<script>
  customElements.define(
    'starlight-medium-zoom',
    class StarlightMediumZoom extends HTMLElement {
      #contentImageSelector = '.sl-markdown-content img'

      constructor() {
        super()

        window.addEventListener('DOMContentLoaded', () => {
          const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1))

          onIdle(async () => {
            const image = document.querySelector<HTMLDivElement>(this.#contentImageSelector)
            if (!image) return

            const template = this.querySelector('template')
            const templateSection = template?.content.querySelector('section')
            if (!template || !templateSection) return

            const { default: mediumZoom } = await import('medium-zoom/dist/pure')

            const zoom = mediumZoom(this.#contentImageSelector, {
              background: 'var(--sl-color-black)',
              container: templateSection,
              template,
            })

            zoom.on('open', this.#onOpen)
          })
        })
      }

      #onOpen = (event: Event) => {
        if (!(event.target instanceof HTMLImageElement)) return

        this.#setCaption(event.target.alt)
      }

      #setCaption(text: string) {
        requestAnimationFrame(() => {
          const footer = document.querySelector('[data-starlight-medium-zoom-caption]')
          if (!footer) return

          text = text.trim()

          if (text.length === 0) {
            footer.remove()
          } else {
            footer.textContent = text
          }
        })
      }
    },
  )
</script>
