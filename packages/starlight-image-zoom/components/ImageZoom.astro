---
import config from 'virtual:starlight-image-zoom-config'
---

<starlight-image-zoom data-hide-caption={!config.showCaptions}>
  <template>
    <dialog class="starlight-image-zoom-dialog">
      <button aria-label="Unzoom image" class="starlight-image-zoom-control">
        <svg aria-hidden="true" fill="currentColor" viewBox="0 0 24 24">
          <use href="#starlight-image-zoom-icon-unzoom"></use>
        </svg>
      </button>
      <figure></figure>
    </dialog>
  </template>
  <svg xmlns="http://www.w3.org/2000/svg" style={{ display: 'none' }}>
    <symbol id="starlight-image-zoom-icon-zoom" viewBox="0 0 24 24">
      <path
        d="M9.79 12.79 4 18.59V17a1 1 0 0 0-2 0v4a1 1 0 0 0 .08.38 1 1 0 0 0 .54.54A1 1 0 0 0 3 22h4a1 1 0 0 0 0-2H5.41l5.8-5.79a1 1 0 0 0-1.42-1.42ZM21.92 2.62a1 1 0 0 0-.54-.54A1 1 0 0 0 21 2h-4a1 1 0 0 0 0 2h1.59l-5.8 5.79a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L20 5.41V7a1 1 0 0 0 2 0V3a1 1 0 0 0-.08-.38Z"
      >
      </path>
    </symbol>
    <symbol id="starlight-image-zoom-icon-unzoom" viewBox="0 0 24 24">
      <path
        d="M21.71 2.29a1 1 0 0 0-1.42 0l-5.79 5.8V6.5a1 1 0 0 0-2 0v4a1 1 0 0 0 .08.38 1 1 0 0 0 .54.54 1 1 0 0 0 .38.08h4a1 1 0 0 0 0-2h-1.59l5.8-5.79a1 1 0 0 0 0-1.42ZM10.88 12.58a1 1 0 0 0-.38-.08h-4a1 1 0 0 0 0 2h1.59l-5.8 5.79a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l5.79-5.8v1.59a1 1 0 0 0 2 0v-4a1 1 0 0 0-.08-.38 1 1 0 0 0-.54-.54Z"
      >
      </path>
    </symbol>
  </svg>
</starlight-image-zoom>

<style is:global>
  :root {
    --starlight-image-zoom-animation-duration: 300ms;
  }

  starlight-image-zoom-zoomable {
    display: inline-block;
    position: relative;
    width: 100%;
  }

  starlight-image-zoom-zoomable img {
    cursor: zoom-in;
  }

  starlight-image-zoom-zoomable button {
    cursor: zoom-in;
  }

  starlight-image-zoom-zoomable button:not(:focus):not(:focus-within) {
    border: none;
    clip: rect(0, 0, 0, 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    white-space: nowrap;
    width: 1px;
  }

  .starlight-image-zoom-control {
    background-color: var(--sl-color-bg-nav);
    border: 2px solid var(--sl-color-gray-2);
    border-radius: 50%;
    display: grid;
    height: 44px;
    inset: 20px auto auto 20px;
    margin-top: 0 !important;
    padding: 10px;
    place-items: center;
    position: absolute;
    width: 44px;
  }

  :is(.starlight-image-zoom-opened, .starlight-image-zoom-transition) .starlight-image-zoom-control {
    inset: 20px 20px auto auto;
  }

  .starlight-image-zoom-source {
    visibility: hidden;
  }

  .starlight-image-zoom-image {
    cursor: zoom-out;
  }

  @media (prefers-reduced-motion: no-preference) {
    .starlight-image-zoom-image {
      transition: transform var(--starlight-image-zoom-animation-duration) cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
</style>

<style>
  dialog {
    background: transparent;
    border: 0;
    height: 100vh;
    height: 100dvh;
    margin: 0;
    max-height: none;
    max-width: none;
    overflow: hidden;
    padding: 0;
    position: fixed;
    width: 100vw;
    width: 100dvw;
  }

  dialog::backdrop {
    background: var(--starlight-image-zoom-backdrop-bg, var(--sl-color-black));
    opacity: 0;
  }

  :global(.starlight-image-zoom-opened) dialog::backdrop {
    opacity: 1;
  }

  figure {
    cursor: zoom-out;
    height: 100%;
    position: relative;
    width: 100%;
  }

  figure :global(figcaption) {
    background-color: color-mix(in srgb, var(--sl-color-bg-nav), transparent 10%);
    border-top: 1px solid var(--sl-color-hairline);
    cursor: initial;
    inset: auto 0 0 0;
    opacity: 0;
    padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
    position: absolute;
  }

  @media (prefers-reduced-transparency) {
    figure :global(figcaption) {
      background-color: var(--sl-color-bg-nav);
    }
  }

  :global(.starlight-image-zoom-opened) figure :global(figcaption) {
    opacity: 1;
  }

  button {
    cursor: zoom-out;
    opacity: 0;
    z-index: 1;
  }

  :global(.starlight-image-zoom-opened) button {
    opacity: 1;
  }

  @media (prefers-reduced-motion: no-preference) {
    button,
    dialog::backdrop,
    figure :global(figcaption) {
      transition: opacity var(--starlight-image-zoom-animation-duration);
    }
  }
</style>

<script>
  import { STARLIGHT_IMAGE_ZOOM_ZOOMABLE_TAG } from '../libs/constants'

  // https://caniuse.com/requestidlecallback
  const onIdle = window.requestIdleCallback ?? ((cb) => setTimeout(cb, 1))

  /**
   * Based on:
   * - https://github.com/francoischalifour/medium-zoom
   * - https://github.com/rpearce/react-medium-image-zoom
   */
  customElements.define(
    'starlight-image-zoom',
    class StarlightImageZoom extends HTMLElement {
      #currentZoom?: CurrentZoom | undefined
      #images: HTMLImageElement[] = []
      #previousFocus?: Element | null | undefined
      #template = this.querySelector('template')

      #classList = {
        image: 'starlight-image-zoom-image',
        opened: 'starlight-image-zoom-opened',
        source: 'starlight-image-zoom-source',
        transition: 'starlight-image-zoom-transition',
      }
      #dataZoomTransformKey = 'zoomTransform'

      static #initialized = false

      constructor() {
        super()

        const initialize = () => {
          onIdle(() => {
            const zoomables = [...document.querySelectorAll(STARLIGHT_IMAGE_ZOOM_ZOOMABLE_TAG)]
            if (zoomables.length === 0) return

            this.#setupZoom(zoomables)
            document.addEventListener('click', this.#onClick)
            window.addEventListener('resize', this.#onResize)
          })
        }
        window.addEventListener('DOMContentLoaded', initialize, { once: true })
        document.addEventListener(
          'astro:after-preparation',
          () => {
            document.removeEventListener('click', this.#onClick)
            window.removeEventListener('resize', this.#onResize)
          },
          { once: true },
        )
        StarlightImageZoom.#initialized ||= document.addEventListener('astro:after-swap', initialize) === undefined
      }

      #setupZoom(zoomables: Element[]) {
        for (const zoomable of zoomables) {
          const img = zoomable.querySelector('img')
          if (!img) continue

          this.#images.push(img)

          zoomable.querySelector('button')?.addEventListener('click', (event) => {
            event.stopPropagation()
            this.#open(img)
          })
        }
      }

      #onClick = ({ target }: MouseEvent) => {
        if (target instanceof HTMLElement && target.closest('figcaption')) return

        if (this.#currentZoom) {
          this.#close()
          return
        }

        if (!(target instanceof HTMLImageElement)) return
        if (!this.#images.includes(target)) return

        this.#open(target)
      }

      #onResize = () => {
        this.#close(true)
      }

      #onWheel = () => {
        this.#close()
      }

      #onCancel = (event: Event) => {
        event.preventDefault()
        this.#close()
      }

      #open(image: HTMLImageElement) {
        if (!this.#template || this.#currentZoom) return

        // Save the current focused element to restore it later.
        this.#previousFocus = document.activeElement

        // Portal the dialog.
        const portal = document.createElement('div')
        portal.append(this.#template.content.cloneNode(true))

        // Grab a reference to the dialog and the zoomed image figure.
        const dialog = portal.querySelector('dialog')
        const figure = dialog?.querySelector('figure')
        if (!dialog || !figure) return

        // Track some body style properties that will be overridden to prevent layout shifts.
        const body: CurrentZoom['body'] = { overflow: document.body.style.overflow, width: document.body.style.width }

        // Disable body scrolling and override some styles to prevent layout shifts.
        const clientWidth = document.body.clientWidth
        document.body.style.overflow = 'hidden'
        document.body.style.width = `${clientWidth}px`
        document
          .querySelector('header')
          ?.style.setProperty('padding-inline-end', `calc(var(--sl-nav-pad-x) + ${window.innerWidth - clientWidth}px)`)

        // Clone the image and apply a zoom effect to it.
        const zoomedImage = this.#cloneAndZoomImage(image)

        // Apply CSS classes to hide the source image and transition the zoomed image.
        image.classList.add(this.#classList.source)
        zoomedImage.classList.add(this.#classList.image)

        // Append the zoomed image to the dialog.
        figure.append(zoomedImage)

        // Set the caption.
        this.#setCaption(image.getAttribute('alt'), figure)

        // Render the portaled dialog.
        document.body.append(portal)

        // Open the dialog.
        document.addEventListener('wheel', this.#onWheel, { once: true })
        dialog.addEventListener('cancel', this.#onCancel)
        dialog.showModal()

        // Apply a zoom effect to zoom the image in.
        onIdle(() => {
          zoomedImage.style.transform = ''
          document.body.classList.add(this.#classList.opened)
        })

        this.#currentZoom = { body, dialog, image, zoomedImage }
      }

      #close(disableAnimation = false) {
        window.removeEventListener('wheel', this.#onWheel)

        if (!this.#currentZoom) return

        const { zoomedImage } = this.#currentZoom

        // Remove the zoom effect from the zoomed image.
        zoomedImage.style.transform = zoomedImage.dataset[this.#dataZoomTransformKey] ?? ''
        document.body.classList.add(this.#classList.transition)
        document.body.classList.remove(this.#classList.opened)

        const { matches: prefersReducedMotion } = window.matchMedia('(prefers-reduced-motion: reduce)')

        if (disableAnimation || prefersReducedMotion) {
          this.#onUnzoomEnd()
        } else {
          zoomedImage.addEventListener('transitionend', this.#onUnzoomEnd, { once: true })
        }
      }

      #onUnzoomEnd = () => {
        if (!this.#currentZoom) return

        const { dialog, image } = this.#currentZoom

        // Show the source image.
        document.body.classList.remove(this.#classList.transition)
        image.classList.remove(this.#classList.source)

        // Remove the portaled dialog.
        dialog.parentElement?.remove()

        // Restore some overridden styles.
        document.body.style.overflow = this.#currentZoom.body.overflow
        document.body.style.width = this.#currentZoom.body.width
        document.querySelector('header')?.style.setProperty('padding-inline-end', 'var(--sl-nav-pad-x)')

        // Reset the current zoom.
        this.#currentZoom = undefined

        // Restore the focus.
        if (this.#previousFocus instanceof HTMLElement) {
          this.#previousFocus.focus()
        }
      }

      #setCaption(text: string | null, figure: HTMLElement) {
        if (Object.hasOwn(this.dataset, 'hideCaption')) return

        text = text?.trim() ?? ''

        if (text.length === 0) return

        const caption = document.createElement('figcaption')
        caption.ariaHidden = 'true'
        caption.textContent = text

        figure.append(caption)
      }

      #cloneAndZoomImage(image: HTMLImageElement) {
        const imageRect = image.getBoundingClientRect()

        // Zoom SVGs at the figure's size, not the image's size.
        const isSVG = this.#isSVGImage(image)
        const naturalWidth = isSVG ? window.innerWidth : image.naturalWidth
        const naturalHeight = isSVG ? window.innerHeight : image.naturalHeight

        const maxWidth = Math.min(window.innerWidth, naturalWidth)
        const maxHeight = Math.min(window.innerHeight, naturalHeight)
        const scale = Math.min(maxWidth / naturalWidth, maxHeight / naturalHeight)

        const width = (isSVG ? window.innerWidth : image.naturalWidth) * scale
        const height = (isSVG ? window.innerHeight : image.naturalHeight) * scale
        const top = (window.innerHeight - height) / 2
        const left = (window.innerWidth - width) / 2

        const clone = image.cloneNode(true) as HTMLImageElement
        clone.removeAttribute('id')

        clone.style.position = 'absolute'
        clone.style.width = `${width}px`
        clone.style.height = `${height}px`
        clone.style.top = `${top}px`
        clone.style.left = `${left}px`
        clone.style.transform = ''

        // Finds out the scale transformations so that the zoomed image fits within the image rect.
        const scaleX = imageRect.width / width
        const scaleY = imageRect.height / height

        // Calculate the translation to align the zoomed image within the image rect.
        const translateX = (-left + (imageRect.width - width) / 2 + imageRect.left) / scaleX
        const translateY = (-top + (imageRect.height - height) / 2 + imageRect.top) / scaleY

        // Apply the scale and translation to the zoomed image.
        clone.style.transform = `scale(${scaleX}, ${scaleY}) translate3d(${translateX}px, ${translateY}px, 0)`

        // Save the transform to a data attribute to be able to animate it back to the original position.
        clone.dataset[this.#dataZoomTransformKey] = clone.style.transform

        // If the image is inside a `<picture>` element, we need to update the `src` attribute and use the correct
        // source.
        if (image.parentElement?.tagName === 'PICTURE' && image.currentSrc) {
          clone.src = image.currentSrc
        }

        return clone
      }

      #isSVGImage(image: HTMLImageElement) {
        return image.currentSrc.toLowerCase().endsWith('.svg')
      }
    },
  )

  interface CurrentZoom {
    body: { overflow: string; width: string }
    dialog: HTMLDialogElement
    image: HTMLImageElement
    zoomedImage: HTMLImageElement
  }
</script>
